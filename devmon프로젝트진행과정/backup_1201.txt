#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define NUM 3 //개발몬 숫자

typedef struct // 개발몬 정보
{
    char* name;
    int iNum; //고유 번호가...필요하나...?
    int hp, max_hp, mp, max_mp;
    int power, sk_power;
} DevlopeMon;
DevlopeMon init = { "0", };
DevlopeMon mon[NUM] = { {"이수빈",0,},{"박승범",1,},{"정광선",2,} };

typedef struct //유저 정보 저장
{
    char name[20];
    int level, xp, hour;
    int xpos, ypos;
    int total_hp, max_hp;  // Hp 총합, Hp 최댓값
} UserInfo;
UserInfo userS;
DevlopeMon user_mon[3];

//맵 구현
char map[25][25] =
{
{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}, //1은 벽
{'1', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '1', '0', '0', '0', '1', 'd', 'd', 'd', 'd', 'd', '1'}, //0은 복도
{'1', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '1', '0', '0', '0', '1', 'd', 'd', 'd', 'd', 'd', '1'}, //c가 교실 - 생산
{'1', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '2', '0', '0', '0', '1', 'd', 'd', 'd', 'd', 'd', '1'}, //d가 교실 - 드론
{'1', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '1', '0', '0', '0', '1', 'd', 'd', 'd', 'd', 'd', '1'}, //e가 교실 - iot
{'1', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '1', '0', '0', '0', '1', 'd', 'd', 'd', 'd', 'd', '1'}, //h가 급식실
{'1', '1', '1', '1', '1', '2', '1', '1', '1', '1', '1', '2', '1', '1', '1', '0', '0', '0', '2', 'd', 'd', 'd', 'd', 'd', '1'}, //p가 교수실
{'1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', 'd', 'd', 'd', 'd', 'd', '1'}, //2이 일반문
{'1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', 'd', 'd', 'd', 'd', 'd', '1'}, //3가 교수실 문
{'1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', 'd', 'd', 'd', 'd', 'd', '1'}, //q가 구급차
{'1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', 'd', 'd', 'd', 'd', 'd', '1'},
{'1', 'h', 'h', 'h', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', 'd', 'd', 'd', 'd', 'd', '1'},
{'1', 'h', 'q', 'h', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '2', 'd', 'd', 'd', 'd', 'd', '1'},
{'1', 'h', 'h', 'h', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', 'd', 'd', 'd', 'd', 'd', '1'},
{'1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1'},
{'1', '0', '0', '0', '0', '0', '0', '1', '1', '2', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1'},
{'1', '0', '0', '0', '0', '0', '0', '1', 'e', 'e', 'e', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1'},
{'1', '0', '0', '0', '0', '0', '0', '1', 'e', 'e', 'e', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1'},
{'1', '0', '0', '0', '0', '0', '0', '1', 'e', 'e', 'e', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1'},
{'1', '1', '1', '1', '2', '1', '1', '1', 'e', 'e', 'e', '1', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1'},
{'1', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '2', '0', '0', '0', '0', '0', '0', '0', '1', 'p', 'p', 'p', 'p', '1'},
{'1', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '1', '0', '0', '0', '0', '0', '0', '0', '1', 'p', 'p', 'p', 'p', '1'},
{'1', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '1', '0', '0', '0', '0', '0', '0', '0', '1', 'p', 'p', 'p', 'p', '1'},
{'1', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '1', '0', '0', '0', '0', '0', '0', '0', '3', 'p', 'p', 'p', 'p', '1'},
{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}
};

//맵 출력 함수
void printing_map(void)
{
    int x = 0, y = 0;

    printf("user:%s HP:%d Hour:%d Level:%d Xp:", userS.name, userS.total_hp,userS.hour,userS.level);
    for (int i = 0;i < 10;i++) printf("ㅁ");

    printf("\n");
    for (x = 0; x < 25; x++)
    {
        for (y = 0; y < 25; y++)
        {
            if (map[x][y] == '0')
                //printf("⬜ ");
                printf("ㅁ ");
            else if (map[x][y] == '1')
                //printf("🧱 ");
                printf("W ");
            else if (map[x][y] == '2')
                //printf("🚪 ");
                printf("D ");
            else if (map[x][y] == '3')
                //printf("🔒 ");
                printf("G ");
            else if (map[x][y] == 'c')
                //printf("🤖 ");
                printf("C ");
            else if (map[x][y] == 'd')
                //printf("🛩️  ");
                printf("C ");
            else if (map[x][y] == 'e')
                //printf("💻 ");
                printf("C ");
            else if (map[x][y] == 'h')
                //printf("🏥 ");
                printf("H ");
            else if (map[x][y] == 'p')
                //printf("👿 ");
                printf("P ");
            else if (map[x][y] == 'q')
                //printf("🚑 ");
                printf("Q ");
        }
        printf("\n");
    }
}

//스폰 함수
void Spawn(void)
{
    userS.xpos = rand() % 25; userS.ypos = rand() % 25;
    while (map[userS.xpos][userS.ypos] != '0') //복도(길)에만 배치 되도록
    {
        userS.xpos = rand() % 25; userS.ypos = rand() % 25;
    }
}

//리스폰 함수(급식실)
void ReSpawn(void)
{
    userS.xpos = 12; userS.ypos = 2;
}

//맵 이동 함수
//void move(int user_x,int user_y);

void init_play(void) //개발몬 초기 능력치 설정
{
    for (int i = 0;i < NUM;i++)
    {
        mon[i].hp = rand() % 100 + 200; mon[i].max_hp = mon[i].hp; //최소 몇 최대 몇
        mon[i].mp = rand() % 50 + 50; mon[i].max_mp = mon[i].mp;
        mon[i].power = rand() % 10 + 10;
        mon[i].sk_power = rand() % 20 + 50;
    }
}

int CountMon(DevlopeMon* mon)
{
    int idx = 0;
    while (mon[idx].name != (NULL) || mon[idx].name != "0") idx++; //유저 쪽 개발몬 수 세기
    return idx;
}

void MakeTeam(int idx, int uidx) //팀 영입 함수
{
    //플레이어의 개발몬 리스트에 추가
    user_mon[uidx] = mon[idx];

    //개발몬 리스트에서 제거 ->배열 요소 제거 함수로 따로 구현해도 될듯!
    for (int i = idx;i < NUM-1;i++)
    {
        mon[i] = mon[i + 1];
    }
    mon[NUM - 1] = init;


    //플레이어 스텟 정보에 적용
    userS.total_hp += mon[idx].hp;
    userS.max_hp += mon[idx].max_hp;
}

void MinusALLHp(int amount) //전체 개발몬 Hp 깎일때
{
    int idx=CountMon(user_mon);
    for (int i = 0;i < idx;i++)
    {
        MinusHP(user_mon, i, amount);
    }
}

void MinusHp(DevlopeMon* mon,int idx, int amount) //idx번 개발몬 Hp 깎일때
{
    mon[idx].hp -= amount;
    userS.total_hp -= amount;
}

void HealALLHP(int num) //Hp 전체 회복 (개발몬 숫자 입력 받음)
{
    for (int i = 0;i < num;i++) user_mon[i].hp = user_mon[i].max_hp;
    userS.total_hp = userS.max_hp;
}

void HealHp(int amount, int idx) //회복 포션 사용 시 회복량이랑 인덱스넘버 입력받음
{
    user_mon[idx].hp += amount;
    userS.total_hp += amount;
}

//개발몬 전투 함수
//void battle_mon(void); //플레이어 개발몬 정보, 현재 hp총합 입력받아야할듯.
//개발몬 리스트, 능력치 출력 -> 첫 전투 개발몬 선택
//게임 화면 구현(전투하는 개발몬 Hp와 상대 개발몬 Hp가 출력되어야함)
//선택지: 공격, 스킬(특수공격), 아이템 사용, 도망(10%확률로 성공)
//공격은 mp소비 없이 상대에게 정해진 데미지 입힘
//스킬은 mp소비 있음(수치는?) 상대에게 정해진 데미지 입힘
//아이템은 아이템 리스트에서 선택해 사용하도록(종류는? 상대 한턴 넘기기(얼음),체력포션)
//도망은 10% 확률로 성공. 실패 시 상대에게 턴 넘어감
//플레이어의 모든 개발몬 Hp 합이 0이 되면 return;(종료)
//승리 시 플레이어 경험치 획득
//팀원 선택 여부 물어야함. 플레이어 개발몬 리스트 꽉찼을시 출력 x

//퀴즈단 지갑 털기 //수식 테스트
void QuestionMon(int cnum) //클래스 위치 받기(생산: 0, 드론: 1, iot: 2)
{
    //퀴즈단: iot-리북녘, 드론-최하문, 생산-류청걸
    char* teacher[3] = { "류청걸","최하문","리북녘" };
    //퀴즈 리스트- 최소 3개 필요, 정답도 함께 저장할 수 있는 2차원 배열 이용?
    //산수 문제로!
    int num1 = rand() % 100 + 1, num2 = rand() % 100 + 1;
    int answer, qcount=0;
    
    printf("%s 교수님을 마주쳤다! \n", teacher[cnum]);

    while(qcount<3)
    {
        printf("%d번째 문제를 내겠다! \n", qcount + 1);
        printf("%d + %d = ?\b", num1, num2);
        scanf("%d", &answer);

        //퀴즈 맞추면 하나당 경험치 획득
        if (answer == num1 + num2)
        {
            printf("맞췄다!! \n");
            userS.xp += 50; qcount++;
            printf("경험치가 50만큼 올랐습니다. \n");
            continue;
        }
        else //틀리면 hp -50%
        {
            printf("틀렸어!!! 공부 다시 하고 와!\n");
            MinusALLHp((userS.total_hp * 0.5) / 3);
            //userS.total_hp>0 이면 그냥 종료, ==0이면 급식실 리스폰(될수 없음)
            return; //함수 종료(플레이어 위치 변화 없음)
        }
    }
    //다 맞췄을 시 Hp회복, 
    if (qcount == 3) HealALLHP(CountMon(user_mon));
}

int main(void)
{
    srand((int)time(NULL)); //난수 시드 값 초기화
    char user[2]; // 입력인자 저장소
    int choose = 0, event; //선택 트리거 , 확률변수
    int hour = 0; //1걸음당 +1

    init_play(); //개발몬 능력치 초기 설정

    printf("시작화면 \n");
    printf("당신의 이름은? >");
    scanf("%s", userS.name);

    //개발몬 선택 화면
    while (choose != 1)
    {
        // 각 개발몬의 얼굴/이름/능력치 출력(임시: 이름과 능력치 리스트로 출력)
        for (int i = 0;i < NUM;i++) //개발몬 리스트 출력
        {
            printf("%d)", i + 1);
            printf("name: %s hp: %d mp: %d ", mon[i].name, mon[i].hp, mon[i].mp);
            printf("power: %d sk_power: %d\n", mon[i].power, mon[i].sk_power);
        }

        // printf("'000'을 선택하시겠습니까?(y/n): "); //선택 여부 확인(임시: 해당 번호 입력 받음)
        printf("선택하고 싶은 개발몬의 번호를 입력하세요: ");
        scanf("%s", user); // y-> 해당 개발몬 정보 저장 / n-> 다음 개발몬 정보 출력 (나중에 추가)

        //입력값 검사
        if (user[0] > '0' && user[0] < '4') choose = 1;
        else continue;

        int idx = atoi(&user[0])-1; // 번호 int값으로 저장
        MakeTeam(idx,0);
    }
    for (int i = 0;i < NUM;i++) //개발몬 리스트 출력
    {
        printf("%d)", i + 1);
        printf("name: %s hp: %d mp: %d ", mon[i].name, mon[i].hp, mon[i].mp);
        printf("power: %d sk_power: %d\n", mon[i].power, mon[i].sk_power);
    }
  
    Spawn(); //플레이어 맵에 배치
    //맵 탐험 시작
    while (1)
    {
        printing_map(); //맵 출력 
        //이동 키 입력 받기
        printf("위(w) 왼쪽(a) 아래(s) 오른쪽(d) >");
        scanf("%s", user); 
        //입력값 검사
        if (user[0] != 'w' && user[0] != 'a' && user[0] != 's' && user[0] != 'd') continue;
        //move(); //플레이어 이동
        hour++; //걸음 수 계산
        //if 확률 변수 에 따라 이벤트 발생
        event = rand() % 100; //이동 입력 받을 때마다

        //복도, 길('0') 이벤트 (event가 0~29일때 발생)
        if (map[userS.xpos][userS.ypos] == '0' && event < 30) printf("배틀이 진행됩니다. \n");
        //개발몬 만나 턴제 전투 실시
        //battle_mon();

        //교실('c') 이벤트 (event가 0~19일때 발생)
        if (map[userS.xpos][userS.ypos] == 'c' && event < 20)
            QuestionMon(0); //iot 교실 이벤트
        if (map[userS.xpos][userS.ypos] == 'd' && event < 20)
            QuestionMon(1); //드론 교실 이벤트
        if (map[userS.xpos][userS.ypos] == 'e' && event < 20)
            QuestionMon(2); //생산 교실 이벤트
        //퀴즈단 만나 퀴즈 풀기
        //question_mon();

        //급식실('h')
        if (map[userS.xpos][userS.ypos] == 'q') HealALLHP(CountMon(user_mon));

        //교수실('p')
        if (hour > 900 && map[userS.xpos][userS.ypos] == 'q') printf("교수실에 들어왔다! \n");
        //hour>900일때 열림 혹은 진입 가능
        //교수 리하복 능력치:Hp 50000 공격력 100~1023
        //hp 5000이하 이면 30% 확률로 hp +5000
        //패배시 급식실에서 리스폰 승리시 수료(수료증, 취업 획득)(게임종료)
        printf("수료증을 얻었다! \n");
        printf("취업이 결정되었다! \n");
        //게임 종료 화면 구현
        break;
    }
    return 0;
}